
type private RSA_PEM
    (
        x: {| Key_Modulus: byte array
              Key_Exponent: byte array
              Key_D: byte array
              Val_P: byte array
              Val_Q: byte array
              Val_DP: byte array
              Val_DQ: byte array
              Val_InverseQ: byte array |}
    ) =

    new(rsa: System.Security.Cryptography.RSA, ([<Optional; DefaultParameterValue(false)>] convertToPublic: bool)) =

        let param = rsa.ExportParameters(not convertToPublic)

        match convertToPublic with
        | false ->
            RSA_PEM(
                {|
                    Key_Modulus = param.Modulus
                    Key_Exponent = param.Exponent
                    Key_D = param.D
                    Val_P = param.P
                    Val_Q = param.Q
                    Val_DP = param.DP
                    Val_DQ = param.DQ
                    Val_InverseQ = param.InverseQ
                |}
            )
        | true ->
            RSA_PEM(
                {|
                    Key_Modulus = param.Modulus
                    Key_Exponent = param.Exponent
                    Key_D = [||]
                    Val_P = [||]
                    Val_Q = [||]
                    Val_DP = [||]
                    Val_DQ = [||]
                    Val_InverseQ = [||]
                |}
            )

(*
Key_Modulus = modulus;
Key_Exponent = exponent;
Key_D = BigL(d, modulus.Length);

int keyLen = modulus.Length / 2;
Val_P = BigL(p, keyLen);
Val_Q = BigL(q, keyLen);
Val_DP = BigL(dp, keyLen);
Val_DQ = BigL(dq, keyLen);
Val_InverseQ = BigL(inverseQ, keyLen);
*)
    new() = RSA_PEM(
                {|
                    Key_Modulus = modulus
                    Key_Exponent = exponent
                    Key_D = BigL(d, modulus.Length)
                    Val_P = BigL(p, keyLen);
                    Val_Q = BigL(q, keyLen);
                    Val_DP = BigL(dp, keyLen);
                    Val_DQ = BigL(dq, keyLen);
                    Val_InverseQ = BigL(inverseQ, keyLen);
                |}
            )

    new() = RSA_PEM()

(*type private RSA(rsa: System.Security.Cryptography.RSA) =
    new(keySize: int) = RSA(RSA.Create keySize)
    new(pem) = RSA()
    new(pem) = RSA()
    new(modulus, exponent, dOrNull) = RSA()
    new(modulus, exponent, d, p, q, dp, dq, inverseQ) = RSA()
    new() = RSA()*)